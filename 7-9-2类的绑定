1.绑定类与函数
class A():
   pass
def say():
   print("saying")
a=A()
a.say=MethodType(say,A)==>将类A与函数say绑定在一起，使类A的实例化对象可以使用函数、
a.say()==>saying
2.运用type创建类
type(name,base,dict)==>-name代表创建类的命名
                       -base代表所创建的类之上有什么父类，用元祖表示
                       -dict代表所创建的类包含哪些方法，以字典形式表示 
 案例：
 def say():
    print("saying")
  def eat():
   print("eating")
A=type("Aname",(object,),{class_say:say,class_eat:eat})
a=A()
3.利用元类创建类
  -元类MetaClass
  -用来创造别的类
  -元类写法固定，必须继承自Type
  -元类命名一般以MetaClass结尾
案例：
  class SayMetaClass(type):
     def __new__(cls,name,bases,attrs):
        #自己的业务处理
        print("hahaha")
        attrs['id']="0000000"
        attrs['addr']
        return type.__new__(cls,name,bases,attrs)
      #元类调用
    class A(object,metaclass=SayMetaClass):
       pass
    a=A()==>hahhaha
    a.id==>000000
               
     
